{"version":3,"file":"static/js/964.d39cf650.chunk.js","mappings":"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","sources":["webpack://react-admin-web/./src/hooks/useLoadingDelayAndKeep.js","webpack://react-admin-web/./src/pages/hooks/use-loading-delay-and-keep.jsx"],"sourcesContent":["import { useState, useRef } from \"react\";\r\nimport { useBoolean } from \"ahooks\";\r\n\r\n// 使用场景：有些时候，当请求返回足够快的情况下，loading 可能会在短时间内完成 false -> true -> false 状态的切换，\r\n// 这时候，加载动画可能会出现闪烁的情况（特别是占满一整屏的动画），这给会用户带来糟糕的体验。\r\n\r\nconst getTime = () => new Date().getTime(); // 获取当前时间戳\r\n\r\n// 延迟 loading变成 true,如果在 delay时间内调用 setFalse，则 loading不会变成 true，有效防止闪烁。\r\n// 处理逻辑：如果请求返回过快，则直接不显示loading\r\nexport const useLoadingDelay = function (val, delay = 500) {\r\n  const [loading, { set }] = useBoolean(val);\r\n  const timerRef = useRef(null);\r\n\r\n  const setTrue = () => {\r\n    if (timerRef.current) return; // 感觉没必要重复设置\r\n    timerRef.current = setTimeout(() => set(true), delay || 0);\r\n  };\r\n\r\n  const setFalse = () => {\r\n    if (timerRef.current) {\r\n      clearTimeout(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n    set(false);\r\n  };\r\n\r\n  return [loading, { setTrue, setFalse }];\r\n};\r\n\r\n// 让 loading 持续指定的时间以上\r\n// 处理逻辑：如果请求时间少于指定的时间，则最终时间为指定的时间，如果请求时间大于指定的时间，则最终时间为请求的时间\r\nexport const useLoadingKeep = function (val, delay = 500) {\r\n  const [loading, { set }] = useBoolean(val);\r\n  const timerRef = useRef(null);\r\n  const [timer, setTimer] = useState();\r\n\r\n  const setTrue = () => {\r\n    if (timerRef.current) {\r\n      clearTimeout(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n    set(true);\r\n    setTimer(getTime());\r\n  };\r\n\r\n  const setFalse = () => {\r\n    if (timerRef.current) return; // 感觉没必要重复设置\r\n\r\n    const currentTime = getTime();\r\n    const formerTime = timer || currentTime;\r\n    const runTime = currentTime - formerTime; // loading已经运行的时间\r\n    timerRef.current = setTimeout(\r\n      () => set(false),\r\n      runTime > delay ? 0 : delay - runTime\r\n    );\r\n    setTimer(undefined); // 清除timer，避免重复setFalse\r\n  };\r\n\r\n  return [loading, { setTrue, setFalse }];\r\n};\r\n\r\n// 不管是单独使用useLoadingDelay还是单独使用useLoadingKeep，效果都不是最好\r\n// 所以他们两个可以中和一下，最终的表现是：\r\n//  如果在指定的时间内完成了请求，那就不展示 loading 动画，超过指定时间后才进行展示\r\n//  如果展示了 loading 动画，那至少要展示足够长的时间，不能一闪而过\r\nexport default function useLoadingDelayAndKeep(val = false, options) {\r\n  const [loading, { set }] = useBoolean(val);\r\n  const timerRef = useRef(null);\r\n  const [timer, setTimer] = useState();\r\n\r\n  const _options = { delay: 300, keep: 500, ...options };\r\n\r\n  const setTrue = () => {\r\n    if (timerRef.current) {\r\n      clearTimeout(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n    timerRef.current = setTimeout(() => {\r\n      set(true);\r\n      setTimer(getTime());\r\n    }, _options.delay || 0);\r\n  };\r\n\r\n  const setFalse = () => {\r\n    if (timerRef.current) {\r\n      clearTimeout(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n    const { keep = 0 } = _options;\r\n    const currentTime = getTime();\r\n    const formerTime = timer || currentTime;\r\n    const runTime = currentTime - formerTime; // loading已经运行的时间\r\n    timerRef.current = setTimeout(\r\n      () => set(false),\r\n      runTime > keep ? 0 : keep - runTime\r\n    );\r\n    setTimer(undefined); // 清除timer，避免重复setFalse\r\n  };\r\n\r\n  return [loading, { setTrue, setFalse }];\r\n}\r\n","import {\r\n  Alert,\r\n  Button,\r\n  Card,\r\n  Spin,\r\n  InputNumber,\r\n  theme,\r\n  Input,\r\n  Space,\r\n} from \"antd\";\r\nimport { useBoolean } from \"ahooks\";\r\nimport useLoadingDelayAndKeep, {\r\n  useLoadingDelay,\r\n  useLoadingKeep,\r\n} from \"@/hooks/useLoadingDelayAndKeep\";\r\nimport { useState } from \"react\";\r\n\r\nconst LoadingDemo = function ({ options }) {\r\n  const { title, loading, setTrue, setFalse, duration, describe, extra } =\r\n    options;\r\n  return (\r\n    <Card title={title} style={{ marginTop: 20 }} extra={extra}>\r\n      <Spin spinning={loading} tip=\"拼命加载中...\">\r\n        <div\r\n          style={{\r\n            height: 150,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => {\r\n                setTrue();\r\n                setTimeout(setFalse, duration);\r\n              }}\r\n            >\r\n              点击模拟请求\r\n            </Button>\r\n            <div style={{ margin: \"16px 0\", textAlign: \"center\" }}>\r\n              {describe}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst OrdinaryLoading = function ({ duration }) {\r\n  const [loading, { setTrue, setFalse }] = useBoolean(false);\r\n  return (\r\n    <LoadingDemo\r\n      options={{\r\n        title: \"普通loading\",\r\n        loading,\r\n        setTrue,\r\n        setFalse,\r\n        duration,\r\n        describe: \"当加载时长比较短的时候，loading就会一闪而过。\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst DelayLoading = function ({ duration }) {\r\n  const [loading, { setTrue, setFalse }] = useLoadingDelay(false);\r\n\r\n  return (\r\n    <LoadingDemo\r\n      options={{\r\n        title: \"延时loading（useLoadingDelay）\",\r\n        loading,\r\n        setTrue,\r\n        setFalse,\r\n        duration,\r\n        describe:\r\n          \"如果加载时间小于500ms，则不会出现loading；如果加载时间大于500ms时，则在500ms后出现loading。\",\r\n        extra: (\r\n          <Input\r\n            style={{ width: 150 }}\r\n            addonBefore=\"delay\"\r\n            defaultValue=\"500ms\"\r\n            disabled\r\n          />\r\n        ),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst KeepLoading = function ({ duration }) {\r\n  const [loading, { setTrue, setFalse }] = useLoadingKeep(false);\r\n  return (\r\n    <LoadingDemo\r\n      options={{\r\n        title: \"持续loading（useLoadingKeep）\",\r\n        loading,\r\n        setTrue,\r\n        setFalse,\r\n        duration,\r\n        describe:\r\n          \"不管加载时间多长都一定会出现loading；如果加载时间小于500ms，则会出现持续时间500ms的loading，反之则持续实际时长。\",\r\n        extra: (\r\n          <Input\r\n            style={{ width: 150 }}\r\n            addonBefore=\"keep\"\r\n            defaultValue=\"500ms\"\r\n            disabled\r\n          />\r\n        ),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst DelayAndKeepLoading = function ({ duration }) {\r\n  const [loading, { setTrue, setFalse }] = useLoadingDelayAndKeep(false);\r\n  return (\r\n    <LoadingDemo\r\n      options={{\r\n        title: \"即延时又持续loading（useLoadingDelayAndKeep）\",\r\n        loading,\r\n        setTrue,\r\n        setFalse,\r\n        duration,\r\n        describe:\r\n          \"这属于是上面两个的中和，如果加载时长小于500ms,则不会出现loading，如果出现了loading，则一定会持续500ms以上。\",\r\n        extra: (\r\n          <Space>\r\n            <Input\r\n              style={{ width: 150 }}\r\n              addonBefore=\"delay\"\r\n              defaultValue=\"500ms\"\r\n              disabled\r\n            />\r\n            <Input\r\n              style={{ width: 150 }}\r\n              addonBefore=\"keep\"\r\n              defaultValue=\"500ms\"\r\n              disabled\r\n            />\r\n          </Space>\r\n        ),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default function Index() {\r\n  const {\r\n    token: { colorBgContainer },\r\n  } = theme.useToken();\r\n  const [apiDuration, setApiDuration] = useState(50);\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      <Alert message=\"使用场景：有些时候，当请求返回足够快的情况下，loading 可能会在短时间内完成 false -> true -> false 状态的切换，这时候，加载动画可能会出现闪烁的情况（特别是占满一整屏的动画），这给会用户带来糟糕的体验。\" />\r\n\r\n      <div\r\n        style={{\r\n          marginTop: 20,\r\n          padding: 16,\r\n          backgroundColor: colorBgContainer,\r\n        }}\r\n      >\r\n        <InputNumber\r\n          min={0}\r\n          value={apiDuration}\r\n          onChange={(val) => setApiDuration(val)}\r\n          addonBefore=\"加载时长\"\r\n          addonAfter=\"单位：ms\"\r\n        />\r\n        <div style={{ marginTop: 12 }}>\r\n          设置加载时长后在下面模拟各种loading的效果\r\n        </div>\r\n      </div>\r\n\r\n      <OrdinaryLoading duration={apiDuration} />\r\n\r\n      <DelayLoading duration={apiDuration} />\r\n\r\n      <KeepLoading duration={apiDuration} />\r\n\r\n      <DelayAndKeepLoading duration={apiDuration} />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["getTime","Date","useLoadingDelay","val","delay","loading","set","useBoolean","timerRef","useRef","setTrue","current","setTimeout","setFalse","clearTimeout","useLoadingKeep","timer","setTimer","useState","currentTime","runTime","undefined","useLoadingDelayAndKeep","options","_options","keep","LoadingDemo","title","duration","describe","extra","_jsx","Card","style","marginTop","children","Spin","spinning","tip","height","display","alignItems","_jsxs","width","textAlign","Button","type","onClick","margin","OrdinaryLoading","DelayLoading","Input","addonBefore","defaultValue","disabled","KeepLoading","DelayAndKeepLoading","Space","Index","token","colorBgContainer","theme","apiDuration","setApiDuration","Alert","message","padding","backgroundColor","InputNumber","min","value","onChange","addonAfter"],"sourceRoot":""}