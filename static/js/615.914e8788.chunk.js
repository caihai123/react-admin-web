"use strict";(self.webpackChunkreact_admin_web=self.webpackChunkreact_admin_web||[]).push([[615],{76615:function(r,n,o){o.r(n),n.default='# markdown 演示页面\r\n\r\n使用 [react-markdown](https://github.com/remarkjs/react-markdown) 组件实现。\r\n\r\n## 这用来做什么？\r\n\r\n未来我可能在本项目中编写很多文档页面，就想本页面一样，我希望可以用 `markdown` 文件来编写，而不是使用常规的页面开发方式。\r\n\r\n## 怎么使用？\r\n\r\n在本该创建页面组件的地方创建`.md`文件，在里面编写内容，然后在配置路由时使用 `Markdown` 组件包装。\r\n\r\n```js\r\nimport { createBrowserRouter } from "react-router-dom";\r\nimport Markdown from "@/components/Markdown";\r\nimport mackdown from "@/pages/components/mackdown.md";\r\n\r\nconst router = createBrowserRouter([\r\n  //...\r\n  {\r\n    path: "/markdown",\r\n    element: <Markdown markdown={mackdown}></Markdown>,\r\n  },\r\n  //...\r\n]);\r\n\r\nexport default router;\r\n```\r\n\r\n\r\n## 路由懒加载\r\n上面的代码中，我没有实现懒加载功能。对于`react`组件，我们可以很轻易的使用`React.lazy`函数实现懒加载的功能。但是却不能对`md`文件这样做。\r\n\r\n当然，我们也可以在代码中为每个`md`文件都使用`Markdown`文件都包装一次，然后像配置普通路由组件一样配置它，就像下面这样，但是这样又让我们每次新建页面时都必须得创建一个相同`jsx`文件。\r\n``` text\r\n├── pages                       \r\n│   ├── markdown1   \r\n|   |   ├── index.jsx  \r\n|   |   ├── markdown.md    \r\n|   ├── markdown2      \r\n|   |   ├── index.jsx  \r\n|   |   ├── markdown.md             \r\n```\r\n``` jsx\r\n// index.jsx\r\nimport Markdown from \'@/components/Markdown\'\r\nimport markdown from \'./markdown.md\'\r\n\r\nexport default function MarkdownPage() {\r\n  return <Markdown markdown={markdown}/>\r\n}\r\n```\r\n\r\n为了解决这个问题，我写了一个函数 `lazyMarkdown`\r\n```js\r\nimport React, { useState } from "react";\r\nimport { useMount } from "ahooks";\r\n\r\nconst Markdown = React.lazy(() => import("./index.jsx"));\r\n\r\nexport default function lazyMarkdown(ctor) {\r\n  const MarkdownPage = function () {\r\n    const [content, setContent] = useState("");\r\n\r\n    useMount(() => {\r\n      ctor().then((module) => {\r\n        setContent(module.default);\r\n      });\r\n    });\r\n\r\n    return <Markdown markdown={content} />;\r\n  };\r\n\r\n  return MarkdownPage;\r\n}\r\n\r\n```\r\n依赖于 `lazyMarkdown`，我们可以轻易的对markdown页面实现懒加载，就像使用 `React.lazy` 一样。\r\n```js\r\nimport { createBrowserRouter } from "react-router-dom";\r\nimport lazyMarkdown from "@/components/Markdown/lazyMarkdown";\r\n\r\nconst router = createBrowserRouter([\r\n  //...\r\n  {\r\n    path: "/markdown",\r\n    Component: lazyMarkdown(() => import("@/pages/components/markdown.md")),\r\n  },\r\n  //...\r\n]);\r\n\r\nexport default router;\r\n```\r\n\r\n## Github 风格的 markdown 主题\r\n\r\n[react-markdown](https://github.com/remarkjs/react-markdown) 组件只会帮助你将 markdown 字符转为 html 展示，并不会控制样式。我这里使用了[github-markdown-css](https://github.com/sindresorhus/github-markdown-css)，我做了一点简单的改动，以适应本系统的主题切换功能。\r\n\r\n## 语法高亮\r\n\r\n以下是突出显示代码的插件示例：[rehype-highlight](https://github.com/rehypejs/rehype-highlight)。\r\n\r\n```jsx\r\nimport React from \'react\'\r\nimport ReactDOM from \'react-dom\'\r\nimport Markdown from \'react-markdown\'\r\nimport rehypeHighlight from \'rehype-highlight\'\r\n\r\nconst markdown = `\r\n# Your markdown here\r\n`\r\n\r\nReactDOM.render(\r\n  <Markdown rehypePlugins={[rehypeHighlight]}>{markdown}</Markdown>,\r\n  document.querySelector(\'#content\')\r\n)\r\n```\r\n\r\n> 本来之前打算使用 [@wooorm/starry-night](https://github.com/wooorm/starry-night) 的，因为它能更好的复用 `github-markdown-css`，但是无奈因为它异步的原因并不能很好的支持 `react-markdown` （详情可以点击 [这里](https://github.com/remarkjs/react-markdown/issues/680) 查看），虽然也可以使用一些手段达到效果，但是它异步加载的资源地址可能对国内的网络也不是很友好，另外它官网也说它太重，不太建议在浏览器运行，所以就果断抛弃了。\r\n'}}]);
//# sourceMappingURL=615.914e8788.chunk.js.map